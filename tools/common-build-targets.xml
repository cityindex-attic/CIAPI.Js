<project name="Common-Build-Targets">
    <!-- the .jar file is located in the tools directory -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/../tools/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<!--
	*************************************************
	* BASE TARGETS									*
	*************************************************
	-->

	
    <target name="basics" description="(PUBLIC) ???">
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-basics.dev"/>
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-basics.test"/>
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-basics.production"/>
        </else>
    </if>
    </target>

    <target name="text" description="(PUBLIC) same as build but without image (png/jpg) optimizing">
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-text.dev"/>
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-text.test"/>
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-text.production"/>
        </else>
    </if>
    </target>

  
    <target name="buildkit" description="(PUBLIC) all html whitespace retained. inline script/style minified">
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-buildkit.dev"/>
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-buildkit.test"/>
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-buildkit.production"/>
        </else>
    </if>
    </target>
    
    
    <target name="build" description="(PUBLIC) minor html optimizations (extra quotes removed). inline script/style minified (default)" >
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-build.dev" />
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-build.test" />
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-build.production" />
        </else>
    </if>
    </target>
    
    <target name="minify" description="(PUBLIC) above optimizations plus full html minification">
    <if>
        <equals arg1="${env}" arg2="dev"/>
        <then>
            <!-- Build a dev environment -->
            <echo message="Building a Development Environment..."/>
            <antcall target="-minify.dev"/>
        </then>

        <elseif>
            <equals arg1="${env}" arg2="test"/>
            <then>
                <!-- Build a test environment -->
                <echo message="Building a Test Environment..."/>
                <antcall target="-minify.test"/>
            </then>
        </elseif>

        <else>
            <!-- Build a production environment -->
            <echo message="Building a Production Environment..."/>
            <antcall target="-minify.production"/>
        </else>
    </if>
    </target>
	
	<target name="runtests-local" description="(PUBLIC) runs tests on local jsTestDriver instance">
		<antcall target="-runtests-local"/>
  	</target>
	
	<target name="runtests-remote" description="(PUBLIC) runs tests on remote jsTestDriver instance">
                 <antcall target="-runtests-remote"/>
  	</target>
	
	<target name="copy-shared-libs" description="(PUBLIC) overwrites the js/libs folder with a copy of the shared libs">
		<delete dir="${dir.source}/${dir.js.libs}" />
				
		<copy todir="${dir.source}/${dir.js.libs}">
			<fileset dir="${dir.source}../../../libs">
				<include name="**/*" />
			</fileset>
		</copy>
  </target>

  <taskdef name="jsdoctoolkit" classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" classpath="../tools/jsdoc/jsdoc-toolkit-ant-task-1.1.2.jar;../tools/rhino/js.jar"/>
  <target name="generate-docs">
    <echo message="Writing Javascript documentation to ${dir.publish.reports}"/> 
    <jsdoctoolkit jsdochome="${basedir}/../tools/jsdoc/jsdoc-toolkit/" template="outline" outputdir="${basedir}/${dir.publish.reports}/jsdocs" 
      includeundocumented="true" includeunderscored="false" verbose="true">
      <fileset dir="${dir.source}/js/" >
        <include name="**/*.js" />
        <exclude name="libs/" />
      </fileset>
    </jsdoctoolkit>
  </target>
	
	<!--
	*************************************************
	* BUILD TARGETS                                 *
	*************************************************
	-->

    <!-- Target: basics -->
    <target name="-basics.dev"
            depends="-rev,
                     -clean,
                     -copy"/>

    <target name="-basics.test"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -css,
                     -html"/>

    <target name="-basics.production"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -strip-console.log,
                     -css,
                     -html"/>

    <!-- Target: text -->
    <target name="-text.dev"
            depends="-rev,
                     -clean,
                     -copy"/>

    <target name="-text.test"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -css,
                     -html,
                     -htmlclean"/>

    <target name="-text.production"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -strip-console.log,
                     -css,
                     -html,
                     -htmlclean"/>

    <!-- Target: buildkit -->
    <target name="-buildkit.dev"
            depends="-rev,
                     -clean,
                     -copy,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-buildkit.test"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -css,
                     -html,
                     -htmlbuildkit,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-buildkit.production"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -strip-console.log,
                     -css,
                     -html,
                     -htmlbuildkit,
                     -imagespng,
                     -imagesjpg"/>

    <!-- Target: build -->
    <target name="-build.dev"
            depends="-rev,
                     -clean,
                     -copy,
					 -runtests-remote,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-build.test"
            depends="-rev,
                     -clean,
                     -copy,
					 -runtests-remote,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -css,
                     -html,
                     -htmlclean,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-build.production"
            depends="-rev,
                     -clean,
                     -copy,
					 -runtests-remote,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -strip-console.log,
                     -css,
                     -html,
                     -htmlclean,
                     -imagespng,
                     -imagesjpg"/>

    <!-- Target: minify -->
    <target name="-minify.dev"
            depends="-rev,
                     -clean,
                     -copy,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-minify.test"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -css,
                     -html,
                     -htmlcompress,
                     -imagespng,
                     -imagesjpg"/>

    <target name="-minify.production"
            depends="-rev,
                     -clean,
                     -copy,
                     -usemin,
                     -js.all.minify,
                     -js.main.concat,
                     -js.mylibs.concat,
                     -js.scripts.concat,
                     -js.delete,
                     -strip-console.log,
                     -css,
                     -html,
                     -htmlcompress,
                     -imagespng,
                     -imagesjpg"/>

	<!--
	*************************************************
	* FUNCTION TARGETS								*
	*************************************************
	-->
	
	<target name="-runtests-local" depends="-create-reports-folder" description="(PRIVATE) Run tests through local jsTestDriver">
		<exec executable="java" dir="${basedir}" failonerror="true">
			<arg line="-jar &quot;${tool.jstestdriver}&quot;"/>
			<arg line="--config &quot;${jstestdriver.config}&quot;"/>
			<arg line="--server http://localhost:${jstestdriver.local.port}"/>
			<arg line="--testOutput &quot;./${dir.publish.reports}/&quot;"/>
			<arg line="--verbose"/>
			<arg line="--reset"/>
			<arg line="--captureConsole"/>
			<arg line="--tests all"/>
		</exec>
	</target>	
	 
	<target name="-runtests-remote" depends="-create-reports-folder" description="(PRIVATE) Run tests through remote jsTestDriver">
<echo message="Ignore whilst remote test runner infrastructure is repaired"/>

	</target>		

	<target name="-load-build-info" description="(PRIVATE) Loads the build versioning information">
		<property file="./${dir.build}/${build.version.info}"/>
	</target>
	
	<target name="-clean" description="(PRIVATE) Wipe the previous build">
	<!-- This is a private target -->
	
		<echo message="Cleaning up previous build directory..."/>
		<delete dir="./${dir.publish}/"/>
	</target>
	
	<target name="-create-reports-folder" description="(PRIVATE) Wipe the previous build">
		<!-- This is a private target -->
		<mkdir dir="./${dir.publish.reports}/"/>
	</target>
	
	<target name="-rev" description="(PRIVATE) Increase the current build number by one and set build date">
		<!-- This is a private target -->
	
		<echo message="Reading build number &amp; setting build date ..."/>
		<propertyfile file="./${dir.build}/${build.version.info}" comment="Build Information File - DO NOT CHANGE">
			<entry key="build.date" type="date" value="now" pattern="dd.MM.yyyy HH:mm"/>
		</propertyfile>
		<echo>Creating build ${build.number}</echo>
	</target>
	
	
	<target name="current-number" depends="-load-build-info" description="(PUBLIC) Returns the current build number">
		<echo>Current build number: ${build.number}</echo>
	</target>
	
	
	<target name="-copy" depends="-load-build-info">
	<!-- This is a private target -->
	
		<echo message="Copying over new files..."/>
		<!-- combine the 2 exclude properties -->
		<var name="excluded-files" value="${file.default.exclude}, ${file.exclude}"/>

		<copy todir="./${dir.publish}">
			<fileset dir="${dir.source}/" excludes="${excluded-files}"/>
		</copy>	
	</target>
	
	
	<!-- JAVASCRIPT -->
  <target name="-check-js-mylibs-exists" unless="js.mylibs.folder.exists">
    <available property="js.mylibs.folder.exists" file="./${dir.publish}/${dir.js.mylibs}/" type="dir"/>
  </target>
  
  <target name="-check-js-libs-exists" unless="js.libs.folder.exists">
    <available property="js.libs.folder.exists" file="./${dir.publish}/${dir.js.libs}/" type="dir"/>
  </target>
  
  <target name="-js.libs.minify" depends="-check-js-libs-exists, -load-build-info" if="js.mylibs.folder.exists"
          description="(PRIVATE) Minifies the (unminified) lib files in dir.js.libs">
    <echo message="-js.libs.minify currently does nothing (we assume that the libraries in libs are as we want them"/>
    <!--
    <echo message="Minifying helper JS files..."/>
    <apply executable="java" parallel="false">
      <fileset dir="./${dir.publish}/${dir.js.libs}/" includes="*.js" excludes="*.min.js"/>
      <arg line="-jar"/>
      <arg path="./${dir.build.tools}/${tool.yuicompressor}"/>
      <srcfile/>
      <arg line="-o"/>
      <mapper type="glob" from="*.js" to="${basedir}/${dir.publish}/${dir.js.libs}/*-${build.number}.min.js"/>
      <targetfile/>
    </apply>
    -->
  </target>

  <target name="-js.all.minify" depends="-js.libs.minify"
            description="(PRIVATE) Minifies the js and mylibs scripts (excluding *.min.js and *.debug.js)">
    <echo message="Minifying the js and mylibs scripts (excluding *.min.js and *.debug.js)"/>
    <apply verbose="true" executable="java" parallel="false">
      <fileset dir="./${dir.publish}/${dir.js}">
        <include name="**/*.js"/>
        <exclude name="**/*.min.js"/>
        <exclude name="**/*.debug.js"/>
        <exclude name="**/${dir.js.libs}/*.js"/>
      </fileset>
      <arg line="-jar"/>
      <arg path="./${dir.build.tools}/${tool.yuicompressor}"/>
      <srcfile/>
      <arg line="--line-break"/>
      <arg line="4000"/>
      <arg line="-o"/>
      <mapper type="glob" from="*.js" to="${basedir}/${dir.publish}/${dir.js}/*.min.js"/>
      <targetfile/>
    </apply>
  </target>
  
  <target name="-js.main.concat" depends="-load-build-info" 
          description="(PRIVATE) Concatenates the JS files in dir.js">
		  <echo message="Concatenating Main JS scripts... (minified)"/>
	    <concat destfile="./${dir.publish}/${dir.js}/b.main-${build.number}.min.js">
			<sort xmlns:rcmp="antlib:org.apache.tools.ant.types.resources.comparators">
              <fileset dir="./${dir.publish}/">
				  <include name="**/${dir.js.main}/**/*.min.js"/>
				  <exclude name="**/${dir.js.mylibs}/**/*.js"/>
				  <exclude name="**/${dir.js.libs}/**/*.js"/>
			  </fileset>
              <rcmp:name />
            </sort>
	    </concat>
      <echo message="Concatenating Main JS scripts... (debug)"/>
      <concat destfile="./${dir.publish}/${dir.js}/b.main-${build.number}.debug.js">
         <sort xmlns:rcmp="antlib:org.apache.tools.ant.types.resources.comparators">
              <fileset dir="./${dir.publish}/">
                  <include name="**/${dir.js.main}/**/*.js"/>
                  <exclude name="**/${dir.js.main}/**/*.min.js"/>
                  <exclude name="**/${dir.js.mylibs}/**/*.js"/>
                  <exclude name="**/${dir.js.libs}/**/*.js"/>
              </fileset>
              <rcmp:name />
            </sort>
      </concat>
	</target>
	
	<target name="-js.mylibs.concat" depends="-check-js-mylibs-exists,-load-build-info" if="js.mylibs.folder.exists"
            description="(PRIVATE) Concatenates the JS files in dir.js.mylibs">
		  <echo message="Concatenating JS libraries ( {mylibs}/{minified} )"/>
	    <concat destfile="./${dir.publish}/${dir.js}/a.mylibs-${build.number}.min.js">
			  <fileset dir="./${dir.publish}/${dir.js.mylibs}/">
				  <include name="**/*.min.js"/>
			  </fileset>    	
	    </concat>
      <echo message="Concatenating JS libraries ( {mylibs}/{debug} )"/>
      <concat destfile="./${dir.publish}/${dir.js}/a.mylibs-${build.number}.debug.js">
        <fileset dir="./${dir.publish}/${dir.js.mylibs}/">
          <include name="**/*.debug.js"/>
        </fileset>
      </concat>
	</target>

  <target name="-js.scripts.concat" depends="-load-build-info" if="build.concat.scripts">
		<echo message="Concatenating library file with main script file"/>
 		<concat destfile="./${dir.publish}/${dir.js}/${scripts.filename}-${build.number}.min.js">
			<fileset dir="./${dir.publish}/${dir.js}/">
				<include name="a.mylibs-${build.number}.min.js"/>
				<include name="b.main-${build.number}.min.js"/>
			</fileset>    	
	    </concat>
		
		<echo message="Concatenating library file with main debug script file"/>
 		<concat destfile="./${dir.publish}/${dir.js}/${scripts.filename}-${build.number}.debug.js">
			<fileset dir="./${dir.publish}/${dir.js}/">
				<include name="a.mylibs-${build.number}.debug.js"/>
				<include name="b.main-${build.number}.debug.js"/>
			</fileset>    	
	    </concat>
	</target>
	
	<target name="-js.delete" depends="-load-build-info" description="(PRIVATE) Deletes the unoptimized js files from build if set">
		<if>
			<equals arg1="${build.delete.unoptimized}" arg2="true"/>
			<then>
				<echo message="Deleting unoptimized files..."/>
				<delete file="./${dir.publish}/${dir.js}/${scripts.filename}-${build.number}.js"/>
				<delete file="./${dir.publish}/${dir.js}/${scripts.filename}-${build.number}-debug.js"/>
				<!-- 
				<delete dir="./${dir.publish}/${dir.js.lib}/"/> 
				<delete file="./${dir.publish}/${dir.js}/libs-${build.number}.js"/>
				this guy probably COULD be on but I think it's better if we keep him off for now. ^pi
				<delete includeemptydirs="true">
				<fileset dir="./${dir.publish}/${dir.js.libs}/" includes="*.js" excludes="*.min.js"/>
				</delete>
				-->
			</then>
		</if>
		
		<if>
			<and>
				<equals arg1="${build.delete.unoptimized}" arg2="true"/>
				<equals arg1="${build.concat.scripts}" arg2="true"/>
			</and>
			<then>
				<delete file="./${dir.publish}/${dir.js}/libs-${build.number}.js"/>
				<delete file="./${dir.publish}/${dir.js}/${scripts.filename}-${build.number}.js"/>
			</then>
		</if>
	</target>
	
	
	<target name="-strip-console.log" description="(PRIVATE) Comments out any console.log statements">
		<echo message="Commenting out console.log lines"/>


		<replaceregexp match="(console.log\(.*\))" replace="/\*\1\*/" flags="g" >
		  <fileset dir="./${dir.publish}/${dir.js}/">
				<include name="**/*.js"/>
				<exclude name="**/*.min.js"/>
			</fileset>
		</replaceregexp>  
	</target>
	
	
	<!-- HTML -->
	<target name="-usemin" depends="-serverconfig" description="(PRIVATE) Replaces references to non-minified scripts">
		<echo message="Switching to minified js files..."/>
    
		<!-- switch from a regular jquery to minified -->
		<replaceregexp match="jquery-(\d|\d(\.\d)+)\.js" replace="jquery-\1.min.js" flags="">
			<fileset dir="./${dir.publish}" includes="${page-files}"/>
		</replaceregexp>
		<!-- switch any google CDN reference to minified -->
		<replaceregexp match="(\d|\d(\.\d)+)\/jquery\.js" replace="\1/jquery.min.js" flags="">
			<fileset dir="./${dir.publish}" includes="${page-files}"/>
		</replaceregexp>	
   
		<echo>kill off those versioning flags: ?v=2</echo>
		<replaceregexp match='\?v=\d+">' replace='">' flags="">
			<fileset dir="./${dir.publish}" includes="${page-files}"/>
		</replaceregexp>
	</target>
	
	
	<target name="-html" depends="-load-build-info" description="(PRIVATE) Very basic clean up of the HTML">
		<echo message="Clean up the html..."/>
		<!-- style.css replacement handled as a replacetoken above -->
		<replaceregexp match="&lt;!-- scripts concatenated [\d\w\s\W]*?!-- end ((scripts)|(concatenated and minified scripts))--&gt;" replace="&lt;script src='${dir.js}/${scripts.filename}-${build.number}.min.js\'&gt;&lt;/script&gt;" flags="m">
			<fileset dir="./${dir.publish}" includes="${page-files}"/>
		</replaceregexp>
		<!--[! use comments like this one to avoid having them get minified -->
	</target>
	
	
	<target name="-htmlclean">
		<apply dir="${basedir}" executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/" includes="${page-files}"/>
			<arg value="-jar"/>
			<arg path="./${dir.build.tools}/${tool.htmlcompressor}"/>
			<arg line="--type html"/>
			<arg line="--preserve-multi-spaces"/>
			<arg line="--remove-quotes"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="*.html"/>    
			<targetfile/>
		</apply>
	</target>
	
	
	<target name="-htmlbuildkit">
		<apply executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/" includes="${page-files}"/>
			<arg value="-jar"/>
			<arg path="./${dir.build}/tools/${tool.htmlcompressor}"/>
			<arg value="--preserve-comments"/>
			<arg line="--preserve-multi-spaces"/>
			<arg line="--type html"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="../${dir.publish}/*.html"/>    
			<targetfile/>
		</apply>
	</target>
	
	
	<target name="-htmlcompress">
		<apply executable="java" parallel="false" force="true" dest="./${dir.publish}/" >
			<fileset dir="./${dir.publish}/" includes="${page-files}"/>
			<arg value="-jar"/>
			<arg path="./${dir.build}/tools/${tool.htmlcompressor}"/>
			<arg line="--type html"/>
			<arg line="--remove-quotes"/>
			<arg line="--compress-js"/>
			<arg line="--compress-css"/>
			<srcfile/>
			<arg value="-o"/>
			<mapper type="glob" from="*.html" to="../${dir.publish}/*.html"/>    
			<targetfile/>
		</apply>
	</target>
  

	<target name="-serverconfig" description="(PRIVATE) Upgrades expires headers" depends="-check-serverconfig-file" if="${serverconfig.file.exists}">
		<echo message="Upgrading expires header timeouts for js/css"/>
		<replace file="./${dir.publish}/${file.serverconfig}" token="access plus 2 months" value="access plus 1 year"/>
	</target>
	    <target name="-check-serverconfig-file" unless="serverconfig.file.exists">
		    <available property="serverconfig.file.exists" file="./${dir.publish}/${file.serverconfig}"/>
		</target>
	
	<!-- CSS -->
	<target name="-css" depends="-check-css-exists,-load-build-info" if="css.folder.exists"
            description="(PRIVATE) Concatenates and Minifies any stylesheets listed in the file.stylesheets property">
		<echo message="Minifying css..."/>
		<concat destfile="./${dir.publish}/${dir.css}/style-${build.number}.css">
			<filelist dir="./${dir.publish}/${dir.css}" files="${stylesheet-files}"/>
		</concat>
		<apply executable="java" parallel="false">
			<fileset dir="./${dir.publish}/${dir.css}/" includes="style-${build.number}.css"/>
			<arg line="-jar"/>
			<arg path="./${dir.build.tools}/${tool.yuicompressor}"/>
			<srcfile/>
		<redirector>
			<outputmapper type="glob" from="style-${build.number}.css" to="./${dir.publish}/${dir.css}/style-${build.number}.min.css"/>
		</redirector>
		</apply>
		<replace token="style.css" value="style-${build.number}.min.css" dir="${dir.publish}" includes="${page-files}"/>
	</target>
        <target name="-check-css-exists" unless="css.folder.exists">
		    <!--<echo message="Checking if folder &quot;./${dir.publish}/${dir.css}/&quot; exists" />-->
            <available property="css.folder.exists" file="./${dir.publish}/${dir.css}/" type="dir"/>
		</target>
	
	<!-- IMAGES -->
	<target name="-imagespng" depends="-check-images-png-exists" if="images.png.exists"
		description="(PRIVATE) Optimizes .png images using optipng">
		<echo message="Optimizing images"/>
		
		<!-- osfamily=unix is actually true on OS X as well -->
		<apply executable="optipng" osfamily="unix">
			<arg value="-o7"/>
			<fileset dir="./${dir.publish}/">
				<include name="**/*.png"/>
			</fileset>
		</apply>
		<apply executable="${dir.build.tools}/optipng-0.6.4-exe/optipng.exe" osfamily="windows">
			<arg value="-o7"/>
			<fileset dir="./${dir.publish}/">
				<include name="**/*.png"/>
			</fileset>
		</apply>
	</target>
	 		<target name="-check-images-png-exists" unless="images.png.exists">
	            <available property="images.png.exists" file="./${dir.publish}/**/*.png" type="file"/>
			</target>
 

	<target name="-imagesjpg" depends="-check-images-jpg-exists" if="images.jpg.exists"
		description="(PRIVATE) Optimizes .jpg images using jpegtan">
		<echo message="Clean up those jpgs..."/>
		<if>
			<equals arg1="${images.strip.metadata}" arg2="true"/>
			<then>
				<var name="strip-meta-tags" value="none"/>
			</then>
			<else>
				<var name="strip-meta-tags" value="all"/>
			</else>
		</if>
		<apply executable="jpegtran" osfamily="unix">
			<fileset dir="${dir.publish}/${dir.images}" includes="*.jpg"/>
			<arg value="-copy"/>
			<arg value="${strip-meta-tags}"/>
			<srcfile/>
			<targetfile/>
			<!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
			<mapper type="glob" from="*.jpg" to="../${dir.publish}/${dir.images}/*.jpg"/>
		</apply>
		<apply executable="${dir.build.tools}/jpegtran.exe" osfamily="windows">
			<fileset dir="${dir.publish}/${dir.images}" includes="*.jpg"/>
			<arg value="-copy"/>
			<arg value="${strip-meta-tags}"/>
			<srcfile/>
			<targetfile/>
			<!-- you may want to flag optimized images. If so, do it here. Otherwise change this to type="identity" -->
			<mapper type="glob" from="*.jpg" to="${dir.publish}/${dir.images}/*.jpg"/>
		</apply>
	</target>
				<target name="-check-images-jpg-exists" unless="images.jpg.exists">
		            <available property="images.jpg.exists" file="./${dir.publish}/**/*.jpg" type="file"/>
				</target>
</project>
